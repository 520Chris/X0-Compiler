program = FunctionList "main" "(" ")" "{" ConstDeclarationList VarDeclarationList statementList "}".
FunctionList = [function FunctionList].
function = (type | "void") ID "(" ParameterList ")" "{" ConstDeclarationList VarDeclarationList statementList "}".
ParameterList = [parameter {"," parameter}].
parameter = type ID.
ConstDeclarationList = [ConstDeclarationStat ConstDeclarationList].
ConstDeclarationStat = "const" type ID "=" ("intNumber" | "doubleNumber" | "true" | "false") ";".
VarDeclarationList = [VarDeclarationStat VarDeclarationList].
VarDeclarationStat = type ID {["[" intNumber "]"} ";".
type = "int" | "char" | "bool" | "double".
statementList = [statement statementList].
statement = IfStat | WhileStat | ReadStat | WriteStat | CompoundStat | ExpressionStat | ForStat | SwitchStat | BreakStat | ExitStat | ContinueStat | DoWhileStat | RepeatStat.

FunctionCall = ID "(" [expression {"," expression}] ")".

IfStat = "if" "(" expression ")" statement [ "else" statement].
WhileStat = "while" "(" expression ")" statement.
ReadStat = "read" variable ";".
WriteStat = "write" expression ";" .
CompoundStat = "{" statementList "}".
ExpressionStat = expression ";" | ";".
ForStat = "for" "(" expression ";" expression ";" expression ")" statement.
SwitchStat = "switch" "(" expression ")" "{" {"case" intNumber ":" statementList} ["default" ":" statementList] "}".
BreakStat = "break" ";".
ExitStat = "exit" "(" intNumber ")" ";".
ContinueStat = "continue" ";".
DoWhileStat = "do" "{" statementList "}" "while" "(" expression ")" ";".
RepeatStat = "repeat" "{" statementList "}" "until" "(" expression ")" ";".
expression = SimpleVariable "=" expression | ValueExpr.
variable = SimpleVariable ["++" | "--"] | ("++" | "--") SimpleVariable.
SimpleVariable = ID {"[" expression "]"}.

ValueExpr = (SimpleValue {("&&" | "||" | "XOR") SimpleValue}) | FunctionCall.

SimpleValue = odd AdditiveExpr | AdditiveExpr [(">" | "<" | ">=" | "<=" | "==" | "!=") AdditiveExpr].
AdditiveExpr = ["-"] term {("+"|"-") term}.
term = factor {("*"|"/"|"%") factor}.
factor = ["!"] ("(" expression ")"| variable | intNumber | doubleNumber | "true" | "false").
