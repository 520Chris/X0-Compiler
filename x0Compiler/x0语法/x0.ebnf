program = "main" "{" declarationList statementList "}".

declarationList = [declarationStat declarationList].
declarationStat = type ID (";" | "[" NUM "]" ";").
type = "int" | "char" | "bool".

statementList = [statement statementList].
statement = ifStat | whileStat | readStat | writeStat | compoundStat | expressionStat | forStat | switchStat | breakStat | exitStat | continueStat | dowhileStat | repeatStat.
ifStat = "if" "(" expression ")" statement [ "else" statement].
whileStat = "while" "(" expression ")" statement.
readStat = "read" variable ";".
writeStat = "write" expression ";" .
compoundStat = "{" statementList "}".
expressionStat = expression ";" | ";".
forStat = "for" "(" expression ";" expression ";" expression ")" statement.
switchStat = "switch" "(" expression ")" "{" {"case" number ":" statementList} ["default" ":" statementList] "}".
breakStat = "break" ";".
exitStat = "exit" "(" NUM ")" ";".
continueStat = "continue" ";".
dowhileStat = "do" "{" statementList "}" "while" "(" expression ")" ";".
repeatStat = "repeat" "{" statementList "}" "until" "(" expression ")" ";".

expression = "#" variable "=" expression | valueExpr.
variable = simpleVariable ["++" | "--"] | ("++" | "--") simpleVariable.
simpleVariable = ID ["[" expression "]"].
valueExpr = simpleValue {("&&" | "||" | "XOR") simpleValue}.
simpleValue = odd additiveExpr | additiveExpr [(">" | "<" | ">=" | "<=" | "==" | "!=") additiveExpr].
additiveExpr = ["-"] term {("+"|"-") term}.
term = factor {("*"|"/"|"%") factor}.
factor = ["!"] ("(" expression ")"| variable | NUM | "true" | "false").
